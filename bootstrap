#!/bin/bash

# don't run this out of directory.
# please.


# don't change this, the rest of the OS build depends on this.
# if you like, you can move it and symlink it.
PREFIX=`pwd`/build/toolchain

# please don't change this
SYSROOT=`pwd`/build/sysroot
THREADS=4

# setup colour codes
_BOLD=`tput bold`
_NORMAL=`tput sgr0`
_BLUE=`tput setaf 4`
_GREEN=`tput setaf 2`






mkdir build

echo "${_BOLD}${_BLUE}=> ${_NORMAL}${_BOLD}Setting up sysroot${_NORMAL}"
mkdir -p $SYSROOT/usr/include/
mkdir -p $SYSROOT/usr/lib

cp -r Libraries/libc/include/* $SYSROOT/usr/include/
cp -r Libraries/libm/include/* $SYSROOT/usr/include/


cd build

# first, download our patched gcc and binutils.
echo "${_BOLD}${_BLUE}=> ${_NORMAL}${_BOLD}Downloading binutils and gcc for target x86_64-orionx${_NORMAL}"
if [ ! -d binutils ]; then
	git clone -q https://requimrar@bitbucket.org/requimrar/binutils.git > /dev/null
fi

if [ ! -d gcc ]; then
	git clone -q https://requimrar@bitbucket.org/requimrar/gcc.git > /dev/null
fi

echo "${_BOLD}${_GREEN}=> ${_NORMAL}${_BOLD}Sysroot: $SYSROOT${_NORMAL}"
echo "${_BOLD}${_GREEN}=> ${_NORMAL}${_BOLD}Prefix:  $PREFIX${_NORMAL}"
echo ""

# start building.
mkdir build-bin build-gcc
cd build-bin
echo "${_BOLD}${_BLUE}=> ${_NORMAL}${_BOLD}Configuring binutils${_NORMAL}"
../binutils/configure --target=x86_64-orionx --prefix=$PREFIX --with-sysroot=$SYSROOT --disable-werror --disable-nls &> /dev/null

echo "${_BOLD}${_BLUE}=> ${_NORMAL}${_BOLD}Building binutils${_NORMAL}"
make -j$THREADS all &> /dev/null

echo "${_BOLD}${_GREEN}=> ${_NORMAL}${_BOLD}Installing binutils${_NORMAL}"
make -j$THREADS install &> /dev/null


echo "${_BOLD}${_BLUE}=> ${_NORMAL}${_BOLD}Configuring gcc${_NORMAL}"
cd ../build-gcc
export PATH="$PREFIX/bin:$PATH"
../gcc/configure --target=x86_64-orionx --prefix=$PREFIX --with-sysroot=$SYSROOT --disable-werror --disable-nls --enable-languages=c,c++ &> /dev/null

echo "${_BOLD}${_BLUE}=> ${_NORMAL}${_BOLD}Building gcc${_NORMAL}"
make -j$THREADS all-gcc &> /dev/null

echo "${_BOLD}${_BLUE}=> ${_NORMAL}${_BOLD}Building libgcc${_NORMAL}"
make -j$THREADS all-target-libgcc &> /dev/null

echo "${_BOLD}${_BLUE}=> ${_NORMAL}${_BOLD}Building libstdc++${_NORMAL}"
make -j$THREADS all-target-libstdc++-v3 &> /dev/null


echo "${_BOLD}${_GREEN}=> ${_NORMAL}${_BOLD}Installing gcc${_NORMAL}"
make -j$THREADS install-gcc &> /dev/null
make -j$THREADS install-target-libgcc &> /dev/null
make -j$THREADS install-target-libstdc++-v3 &> /dev/null

cd ..
cd ..


rm -rf build/build-bin
rm -rf build/build-gcc


if [ -f build/disk.img ]; then
	exit
fi




# first check for args.
if [ -z "$1" ]; then
	echo "Please pass the size of the OS disk image in MEGABYTES (1024 KB) to ./bootstrap."
	exit
fi











echo "=> Creating disk image of $1 mb"
# edit if not on mac, life will be easier.
# seriously.

# use 'dd' to create.
BLOCKSIZE=$(($1 * 1024 * 1024 / 512))
DISKNAME=build/disk.img

# create the image first
dd if=/dev/zero of=$DISKNAME bs=512 count=$BLOCKSIZE &> /dev/null

# run fdisk on it
echo -e "y\nedit 1\n0B\nn\n2047\n\nflag 1\nwrite\nexit\n" | fdisk -e $DISKNAME > /dev/null

# separate the things.
dd if=$DISKNAME of=build/mbr.img bs=512 count=2047 &> /dev/null
dd if=$DISKNAME of=build/fs.img bs=512 skip=2047 &> /dev/null

# EDIT HERE FOR NON MAC
# mount the image
IDENTIFER=`hdiutil attach -nomount build/fs.img`

# make the fat32 image.
newfs_msdos -F 32 -v "MX" $IDENTIFER &> /dev/null

# detach
hdiutil detach $IDENTIFER

# recombine
cat build/mbr.img build/fs.img > $DISKNAME

# mount the entire image
hdiutil attach $DISKNAME

# copy over grub files
mkdir -p /Volumes/MX/boot/grub
cp grub/* /Volumes/MX/boot/grub/

# create a quick grub floppy.
dd if=grub/stage1 of=grub.img count=1 bs=512 &> /dev/null
dd if=grub/stage2 of=grub.img seek=1 bs=512 &> /dev/null

# give the user instructions
echo "=> Installing GRUB"
echo "You should see a shell grub>"
echo "Enter these commands:"
echo "root (hd0,0)"
echo -e "setup (hd0)\n\n"
echo "Press Command-Q to close QEMU once you're done."
qemu-system-x86_64 -boot a -fda grub.img -hda $DISKNAME

echo "=> GRUB setup complete."
echo "=> Cleaning up"
rm grub.img
rm build/fs.img
rm build/mbr.img
hdiutil detach -quiet $IDENTIFER
echo "=> Ready!"
exit
